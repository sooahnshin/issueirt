// Generated by rstantools.  Do not edit by hand.

/*
    issueipe is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    issueipe is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with issueipe.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_issueipe_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'issueipe', line 19, column 2 to column 16)",
                                                      " (in 'issueipe', line 20, column 2 to column 21)",
                                                      " (in 'issueipe', line 21, column 2 to column 24)",
                                                      " (in 'issueipe', line 22, column 2 to column 24)",
                                                      " (in 'issueipe', line 23, column 2 to column 20)",
                                                      " (in 'issueipe', line 24, column 2 to column 20)",
                                                      " (in 'issueipe', line 25, column 2 to column 21)",
                                                      " (in 'issueipe', line 26, column 2 to column 20)",
                                                      " (in 'issueipe', line 29, column 2 to column 27)",
                                                      " (in 'issueipe', line 30, column 2 to column 16)",
                                                      " (in 'issueipe', line 31, column 2 to column 23)",
                                                      " (in 'issueipe', line 32, column 2 to column 12)",
                                                      " (in 'issueipe', line 34, column 4 to column 57)",
                                                      " (in 'issueipe', line 35, column 4 to column 59)",
                                                      " (in 'issueipe', line 33, column 17 to line 36, column 3)",
                                                      " (in 'issueipe', line 33, column 2 to line 36, column 3)",
                                                      " (in 'issueipe', line 38, column 4 to column 45)",
                                                      " (in 'issueipe', line 39, column 4 to column 47)",
                                                      " (in 'issueipe', line 37, column 17 to line 40, column 3)",
                                                      " (in 'issueipe', line 37, column 2 to line 40, column 3)",
                                                      " (in 'issueipe', line 70, column 2 to column 37)",
                                                      " (in 'issueipe', line 72, column 4 to column 155)",
                                                      " (in 'issueipe', line 71, column 21 to line 73, column 3)",
                                                      " (in 'issueipe', line 71, column 2 to line 73, column 3)",
                                                      " (in 'issueipe', line 44, column 4 to column 26)",
                                                      " (in 'issueipe', line 45, column 4 to column 26)",
                                                      " (in 'issueipe', line 43, column 17 to line 46, column 3)",
                                                      " (in 'issueipe', line 43, column 2 to line 46, column 3)",
                                                      " (in 'issueipe', line 47, column 2 to column 55)",
                                                      " (in 'issueipe', line 49, column 4 to column 34)",
                                                      " (in 'issueipe', line 50, column 4 to column 31)",
                                                      " (in 'issueipe', line 54, column 4 to column 35)",
                                                      " (in 'issueipe', line 48, column 17 to line 55, column 3)",
                                                      " (in 'issueipe', line 48, column 2 to line 55, column 3)",
                                                      " (in 'issueipe', line 57, column 4 to column 30)",
                                                      " (in 'issueipe', line 58, column 4 to column 27)",
                                                      " (in 'issueipe', line 61, column 4 to column 39)",
                                                      " (in 'issueipe', line 62, column 24 to column 25)",
                                                      " (in 'issueipe', line 62, column 4 to column 28)",
                                                      " (in 'issueipe', line 63, column 4 to column 27)",
                                                      " (in 'issueipe', line 56, column 17 to line 64, column 3)",
                                                      " (in 'issueipe', line 56, column 2 to line 64, column 3)",
                                                      " (in 'issueipe', line 66, column 4 to column 151)",
                                                      " (in 'issueipe', line 65, column 21 to line 67, column 3)",
                                                      " (in 'issueipe', line 65, column 2 to line 67, column 3)",
                                                      " (in 'issueipe', line 2, column 1 to column 16)",
                                                      " (in 'issueipe', line 3, column 1 to column 16)",
                                                      " (in 'issueipe', line 4, column 1 to column 16)",
                                                      " (in 'issueipe', line 5, column 1 to column 20)",
                                                      " (in 'issueipe', line 6, column 1 to column 20)",
                                                      " (in 'issueipe', line 7, column 1 to column 16)",
                                                      " (in 'issueipe', line 8, column 25 to column 26)",
                                                      " (in 'issueipe', line 8, column 1 to column 28)",
                                                      " (in 'issueipe', line 9, column 25 to column 26)",
                                                      " (in 'issueipe', line 9, column 1 to column 28)",
                                                      " (in 'issueipe', line 10, column 29 to column 34)",
                                                      " (in 'issueipe', line 10, column 1 to column 36)",
                                                      " (in 'issueipe', line 11, column 22 to column 27)",
                                                      " (in 'issueipe', line 11, column 1 to column 29)",
                                                      " (in 'issueipe', line 12, column 22 to column 27)",
                                                      " (in 'issueipe', line 12, column 1 to column 29)",
                                                      " (in 'issueipe', line 13, column 25 to column 26)",
                                                      " (in 'issueipe', line 13, column 1 to column 28)",
                                                      " (in 'issueipe', line 14, column 1 to column 17)",
                                                      " (in 'issueipe', line 15, column 1 to column 17)",
                                                      " (in 'issueipe', line 19, column 13 to column 14)",
                                                      " (in 'issueipe', line 20, column 18 to column 19)",
                                                      " (in 'issueipe', line 21, column 21 to column 22)",
                                                      " (in 'issueipe', line 22, column 21 to column 22)",
                                                      " (in 'issueipe', line 23, column 17 to column 18)",
                                                      " (in 'issueipe', line 24, column 17 to column 18)",
                                                      " (in 'issueipe', line 25, column 18 to column 19)",
                                                      " (in 'issueipe', line 29, column 24 to column 25)",
                                                      " (in 'issueipe', line 30, column 13 to column 14)",
                                                      " (in 'issueipe', line 31, column 20 to column 21)",
                                                      " (in 'issueipe', line 32, column 9 to column 10)",
                                                      " (in 'issueipe', line 70, column 30 to column 35)"};
#include <stan_meta_header.hpp>
class model_issueipe final : public model_base_crtp<model_issueipe> {
private:
  int J;
  int M;
  int N;
  int N_obs;
  int N_mis;
  int K;
  std::vector<int> j;
  std::vector<int> m;
  std::vector<int> y_obs;
  std::vector<int> idx_obs;
  std::vector<int> idx_mis;
  std::vector<int> z;
  double a;
  double b;
 
public:
  ~model_issueipe() { }
  
  inline std::string model_name() const final { return "model_issueipe"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_issueipe(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_issueipe_namespace::model_issueipe";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 46;
      context__.validate_dims("data initialization","J","int",
          context__.to_vec());
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 46;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 46;
      current_statement__ = 46;
      check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 47;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 47;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 47;
      current_statement__ = 47;
      check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 48;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 48;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 48;
      current_statement__ = 48;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization","N_obs","int",
          context__.to_vec());
      N_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 49;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "N_obs", N_obs, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization","N_mis","int",
          context__.to_vec());
      N_mis = std::numeric_limits<int>::min();
      
      current_statement__ = 50;
      N_mis = context__.vals_i("N_mis")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "N_mis", N_mis, 1);
      current_statement__ = 51;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 51;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 51;
      current_statement__ = 51;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 52;
      validate_non_negative_index("j", "N", N);
      current_statement__ = 53;
      context__.validate_dims("data initialization","j","int",
          context__.to_vec(N));
      j = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 53;
      assign(j, nil_index_list(), context__.vals_i("j"),
        "assigning variable j");
      current_statement__ = 53;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 53;
        current_statement__ = 53;
        check_greater_or_equal(function__, "j[sym1__]", j[(sym1__ - 1)], 1);}
      current_statement__ = 53;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 53;
        current_statement__ = 53;
        check_less_or_equal(function__, "j[sym1__]", j[(sym1__ - 1)], J);}
      current_statement__ = 54;
      validate_non_negative_index("m", "N", N);
      current_statement__ = 55;
      context__.validate_dims("data initialization","m","int",
          context__.to_vec(N));
      m = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 55;
      assign(m, nil_index_list(), context__.vals_i("m"),
        "assigning variable m");
      current_statement__ = 55;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 55;
        current_statement__ = 55;
        check_greater_or_equal(function__, "m[sym1__]", m[(sym1__ - 1)], 1);}
      current_statement__ = 55;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 55;
        current_statement__ = 55;
        check_less_or_equal(function__, "m[sym1__]", m[(sym1__ - 1)], M);}
      current_statement__ = 56;
      validate_non_negative_index("y_obs", "N_obs", N_obs);
      current_statement__ = 57;
      context__.validate_dims("data initialization","y_obs","int",
          context__.to_vec(N_obs));
      y_obs = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 57;
      assign(y_obs, nil_index_list(), context__.vals_i("y_obs"),
        "assigning variable y_obs");
      current_statement__ = 57;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 57;
        current_statement__ = 57;
        check_greater_or_equal(function__, "y_obs[sym1__]",
                               y_obs[(sym1__ - 1)], 0);}
      current_statement__ = 57;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 57;
        current_statement__ = 57;
        check_less_or_equal(function__, "y_obs[sym1__]", y_obs[(sym1__ - 1)],
                            1);}
      current_statement__ = 58;
      validate_non_negative_index("idx_obs", "N_obs", N_obs);
      current_statement__ = 59;
      context__.validate_dims("data initialization","idx_obs","int",
          context__.to_vec(N_obs));
      idx_obs = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 59;
      assign(idx_obs, nil_index_list(), context__.vals_i("idx_obs"),
        "assigning variable idx_obs");
      current_statement__ = 59;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 59;
        current_statement__ = 59;
        check_greater_or_equal(function__, "idx_obs[sym1__]",
                               idx_obs[(sym1__ - 1)], 1);}
      current_statement__ = 60;
      validate_non_negative_index("idx_mis", "N_mis", N_mis);
      current_statement__ = 61;
      context__.validate_dims("data initialization","idx_mis","int",
          context__.to_vec(N_mis));
      idx_mis = std::vector<int>(N_mis, std::numeric_limits<int>::min());
      
      current_statement__ = 61;
      assign(idx_mis, nil_index_list(), context__.vals_i("idx_mis"),
        "assigning variable idx_mis");
      current_statement__ = 61;
      for (int sym1__ = 1; sym1__ <= N_mis; ++sym1__) {
        current_statement__ = 61;
        current_statement__ = 61;
        check_greater_or_equal(function__, "idx_mis[sym1__]",
                               idx_mis[(sym1__ - 1)], 1);}
      current_statement__ = 62;
      validate_non_negative_index("z", "M", M);
      current_statement__ = 63;
      context__.validate_dims("data initialization","z","int",
          context__.to_vec(M));
      z = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 63;
      assign(z, nil_index_list(), context__.vals_i("z"),
        "assigning variable z");
      current_statement__ = 63;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 63;
        current_statement__ = 63;
        check_greater_or_equal(function__, "z[sym1__]", z[(sym1__ - 1)], 1);}
      current_statement__ = 63;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 63;
        current_statement__ = 63;
        check_less_or_equal(function__, "z[sym1__]", z[(sym1__ - 1)], K);}
      current_statement__ = 64;
      context__.validate_dims("data initialization","a","double",
          context__.to_vec());
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 64;
      a = context__.vals_r("a")[(1 - 1)];
      current_statement__ = 64;
      current_statement__ = 64;
      check_greater_or_equal(function__, "a", a, 0);
      current_statement__ = 65;
      context__.validate_dims("data initialization","b","double",
          context__.to_vec());
      b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 65;
      b = context__.vals_r("b")[(1 - 1)];
      current_statement__ = 65;
      current_statement__ = 65;
      check_greater_or_equal(function__, "b", b, 0);
      current_statement__ = 66;
      validate_non_negative_index("alpha", "M", M);
      current_statement__ = 67;
      validate_non_negative_index("w", "M", M);
      current_statement__ = 68;
      validate_non_negative_index("x_coord_theta", "K", K);
      current_statement__ = 69;
      validate_non_negative_index("y_coord_theta", "K", K);
      current_statement__ = 70;
      validate_non_negative_index("x_coord_u", "M", M);
      current_statement__ = 71;
      validate_non_negative_index("y_coord_u", "M", M);
      current_statement__ = 72;
      validate_non_negative_index("x", "J", J);
      current_statement__ = 73;
      validate_non_negative_index("r_theta", "K", K);
      current_statement__ = 74;
      validate_non_negative_index("theta", "K", K);
      current_statement__ = 75;
      validate_non_negative_index("r_u", "M", M);
      current_statement__ = 76;
      validate_non_negative_index("u", "M", M);
      current_statement__ = 77;
      validate_non_negative_index("y_mis", "N_mis", N_mis);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += M;
      num_params_r__ += M;
      num_params_r__ += K;
      num_params_r__ += K;
      num_params_r__ += M;
      num_params_r__ += M;
      num_params_r__ += J * 2;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_issueipe_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> alpha;
      alpha = std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 1;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      std::vector<local_scalar_t__> w;
      w = std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 2;
        assign(w, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable w");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(w, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(w[(sym1__ - 1)], 0, lp__),
            "assigning variable w");
        } else {
          current_statement__ = 2;
          assign(w, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(w[(sym1__ - 1)], 0),
            "assigning variable w");
        }}
      std::vector<local_scalar_t__> x_coord_theta;
      x_coord_theta = std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        assign(x_coord_theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable x_coord_theta");}
      std::vector<local_scalar_t__> y_coord_theta;
      y_coord_theta = std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 4;
        assign(y_coord_theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable y_coord_theta");}
      std::vector<local_scalar_t__> x_coord_u;
      x_coord_u = std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 5;
        assign(x_coord_u, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable x_coord_u");}
      std::vector<local_scalar_t__> y_coord_u;
      y_coord_u = std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 6;
        assign(y_coord_u, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable y_coord_u");}
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> x;
      x = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(J, Eigen::Matrix<local_scalar_t__, 1, -1>(2));
      stan::math::fill(x, DUMMY_VAR__);
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 7;
        assign(x, cons_list(index_uni(sym1__), nil_index_list()),
          in__.row_vector(2), "assigning variable x");}
      local_scalar_t__ rho;
      rho = DUMMY_VAR__;
      
      current_statement__ = 8;
      rho = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        rho = stan::math::lb_constrain(rho, 0, lp__);
      } else {
        current_statement__ = 8;
        rho = stan::math::lb_constrain(rho, 0);
      }
      std::vector<local_scalar_t__> r_theta;
      r_theta = std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> r_u;
      r_u = std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> u;
      u = std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      
      current_statement__ = 16;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 13;
        assign(theta, cons_list(index_uni(k), nil_index_list()),
          atan2(y_coord_theta[(k - 1)], x_coord_theta[(k - 1)]),
          "assigning variable theta");
        current_statement__ = 14;
        assign(r_theta, cons_list(index_uni(k), nil_index_list()),
          stan::math::hypot(x_coord_theta[(k - 1)], y_coord_theta[(k - 1)]),
          "assigning variable r_theta");}
      current_statement__ = 20;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 17;
        assign(u, cons_list(index_uni(i), nil_index_list()),
          atan2(y_coord_u[(i - 1)], x_coord_u[(i - 1)]),
          "assigning variable u");
        current_statement__ = 18;
        assign(r_u, cons_list(index_uni(i), nil_index_list()),
          stan::math::hypot(x_coord_u[(i - 1)], y_coord_u[(i - 1)]),
          "assigning variable r_u");}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_greater_or_equal(function__, "r_theta[sym1__]",
                               r_theta[(sym1__ - 1)], 0);}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 11;
        current_statement__ = 11;
        check_greater_or_equal(function__, "r_u[sym1__]", r_u[(sym1__ - 1)],
                               0);}
      {
        current_statement__ = 28;
        for (int k = 1; k <= J; ++k) {
          current_statement__ = 25;
          lp_accum__.add(normal_lpdf<propto__>(x[(k - 1)][(1 - 1)], 0, 1));
          current_statement__ = 26;
          lp_accum__.add(normal_lpdf<propto__>(x[(k - 1)][(2 - 1)], 0, 1));}
        current_statement__ = 29;
        lp_accum__.add(
          (-a * stan::math::log(modified_bessel_first_kind(0, rho))));
        current_statement__ = 34;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 30;
          lp_accum__.add(normal_lpdf<propto__>(r_theta[(k - 1)], 1.0, 0.1));
          current_statement__ = 31;
          lp_accum__.add(-stan::math::log(r_theta[(k - 1)]));
          current_statement__ = 32;
          lp_accum__.add(
            von_mises_lpdf<propto__>(theta[(k - 1)], 0, (b * rho)));}
        current_statement__ = 42;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 35;
          lp_accum__.add(normal_lpdf<propto__>(r_u[(i - 1)], 1.0, 0.1));
          current_statement__ = 36;
          lp_accum__.add(-stan::math::log(r_u[(i - 1)]));
          current_statement__ = 37;
          lp_accum__.add(
            von_mises_lpdf<propto__>(u[(i - 1)], theta[(z[(i - 1)] - 1)],
              rho));
          current_statement__ = 38;
          if (logical_lt(w[(i - 1)], 0)) {
            current_statement__ = 38;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 38;
            lp_accum__.add(-normal_ccdf_log(0, 0, 5));
          }
          current_statement__ = 39;
          lp_accum__.add(normal_lpdf<propto__>(w[(i - 1)], 0, 5));
          current_statement__ = 40;
          lp_accum__.add(normal_lpdf<propto__>(alpha[(i - 1)], 0, 5));}
        current_statement__ = 45;
        for (int n = 1; n <= N_obs; ++n) {
          current_statement__ = 43;
          lp_accum__.add(
            bernoulli_lpmf<propto__>(y_obs[(n - 1)],
              Phi(
                ((dot_product(x[(j[(idx_obs[(n - 1)] - 1)] - 1)],
                    (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                    stan::math::cos(u[(m[(idx_obs[(n - 1)] - 1)] - 1)]),
                    stan::math::sin(u[(m[(idx_obs[(n - 1)] - 1)] - 1)])).finished())
                   * w[(m[(idx_obs[(n - 1)] - 1)] - 1)]) -
                  alpha[(m[(idx_obs[(n - 1)] - 1)] - 1)]))));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_issueipe_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> alpha;
      alpha = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 1;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      std::vector<double> w;
      w = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 2;
        assign(w, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable w");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 2;
        assign(w, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(w[(sym1__ - 1)], 0),
          "assigning variable w");}
      std::vector<double> x_coord_theta;
      x_coord_theta = std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        assign(x_coord_theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable x_coord_theta");}
      std::vector<double> y_coord_theta;
      y_coord_theta = std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 4;
        assign(y_coord_theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable y_coord_theta");}
      std::vector<double> x_coord_u;
      x_coord_u = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 5;
        assign(x_coord_u, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable x_coord_u");}
      std::vector<double> y_coord_u;
      y_coord_u = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 6;
        assign(y_coord_u, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable y_coord_u");}
      std::vector<Eigen::Matrix<double, 1, -1>> x;
      x = std::vector<Eigen::Matrix<double, 1, -1>>(J, Eigen::Matrix<double, 1, -1>(2));
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 7;
        assign(x, cons_list(index_uni(sym1__), nil_index_list()),
          in__.row_vector(2), "assigning variable x");}
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      rho = in__.scalar();
      current_statement__ = 8;
      rho = stan::math::lb_constrain(rho, 0);
      std::vector<double> r_theta;
      r_theta = std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> theta;
      theta = std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> r_u;
      r_u = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> u;
      u = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(w[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(x_coord_theta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(y_coord_theta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(x_coord_u[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(y_coord_u[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          vars__.emplace_back(x[(sym2__ - 1)][(sym1__ - 1)]);}}
      vars__.emplace_back(rho);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 16;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 13;
        assign(theta, cons_list(index_uni(k), nil_index_list()),
          atan2(y_coord_theta[(k - 1)], x_coord_theta[(k - 1)]),
          "assigning variable theta");
        current_statement__ = 14;
        assign(r_theta, cons_list(index_uni(k), nil_index_list()),
          stan::math::hypot(x_coord_theta[(k - 1)], y_coord_theta[(k - 1)]),
          "assigning variable r_theta");}
      current_statement__ = 20;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 17;
        assign(u, cons_list(index_uni(i), nil_index_list()),
          atan2(y_coord_u[(i - 1)], x_coord_u[(i - 1)]),
          "assigning variable u");
        current_statement__ = 18;
        assign(r_u, cons_list(index_uni(i), nil_index_list()),
          stan::math::hypot(x_coord_u[(i - 1)], y_coord_u[(i - 1)]),
          "assigning variable r_u");}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_greater_or_equal(function__, "r_theta[sym1__]",
                               r_theta[(sym1__ - 1)], 0);}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 11;
        current_statement__ = 11;
        check_greater_or_equal(function__, "r_u[sym1__]", r_u[(sym1__ - 1)],
                               0);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          vars__.emplace_back(r_theta[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          vars__.emplace_back(theta[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(r_u[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(u[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<int> y_mis;
      y_mis = std::vector<int>(N_mis, std::numeric_limits<int>::min());
      
      current_statement__ = 24;
      for (int n = 1; n <= N_mis; ++n) {
        current_statement__ = 22;
        assign(y_mis, cons_list(index_uni(n), nil_index_list()),
          bernoulli_rng(
            Phi(
              ((dot_product(x[(j[(idx_mis[(n - 1)] - 1)] - 1)],
                  (Eigen::Matrix<double,1,-1>(2) <<
                  stan::math::cos(u[(m[(idx_mis[(n - 1)] - 1)] - 1)]),
                  stan::math::sin(u[(m[(idx_mis[(n - 1)] - 1)] - 1)])).finished())
                 * w[(m[(idx_mis[(n - 1)] - 1)] - 1)]) -
                alpha[(m[(idx_mis[(n - 1)] - 1)] - 1)])), base_rng__),
          "assigning variable y_mis");}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= N_mis; ++sym1__) {
        current_statement__ = 21;
        current_statement__ = 21;
        check_greater_or_equal(function__, "y_mis[sym1__]",
                               y_mis[(sym1__ - 1)], 0);}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= N_mis; ++sym1__) {
        current_statement__ = 21;
        current_statement__ = 21;
        check_less_or_equal(function__, "y_mis[sym1__]", y_mis[(sym1__ - 1)],
                            1);}
      for (int sym1__ = 1; sym1__ <= N_mis; ++sym1__) {
        vars__.emplace_back(y_mis[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> alpha;
      alpha = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(alpha, nil_index_list(), context__.vals_r("alpha"),
        "assigning variable alpha");
      std::vector<double> w;
      w = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(w, nil_index_list(), context__.vals_r("w"),
        "assigning variable w");
      std::vector<double> w_free__;
      w_free__ = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 2;
        assign(w_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(w[(sym1__ - 1)], 0),
          "assigning variable w_free__");}
      std::vector<double> x_coord_theta;
      x_coord_theta = std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(x_coord_theta, nil_index_list(),
        context__.vals_r("x_coord_theta"), "assigning variable x_coord_theta");
      std::vector<double> y_coord_theta;
      y_coord_theta = std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(y_coord_theta, nil_index_list(),
        context__.vals_r("y_coord_theta"), "assigning variable y_coord_theta");
      std::vector<double> x_coord_u;
      x_coord_u = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(x_coord_u, nil_index_list(), context__.vals_r("x_coord_u"),
        "assigning variable x_coord_u");
      std::vector<double> y_coord_u;
      y_coord_u = std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(y_coord_u, nil_index_list(), context__.vals_r("y_coord_u"),
        "assigning variable y_coord_u");
      std::vector<Eigen::Matrix<double, 1, -1>> x;
      x = std::vector<Eigen::Matrix<double, 1, -1>>(J, Eigen::Matrix<double, 1, -1>(2));
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 7;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 7;
            assign(x,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_flat__[(pos__ - 1)], "assigning variable x");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      rho = context__.vals_r("rho")[(1 - 1)];
      double rho_free__;
      rho_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      rho_free__ = stan::math::lb_free(rho, 0);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(w_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(x_coord_theta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(y_coord_theta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(x_coord_u[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(y_coord_u[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(x[(sym1__ - 1)][(sym2__ - 1)]);}}
      vars__.emplace_back(rho_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("alpha");
    names__.emplace_back("w");
    names__.emplace_back("x_coord_theta");
    names__.emplace_back("y_coord_theta");
    names__.emplace_back("x_coord_u");
    names__.emplace_back("y_coord_u");
    names__.emplace_back("x");
    names__.emplace_back("rho");
    names__.emplace_back("r_theta");
    names__.emplace_back("theta");
    names__.emplace_back("r_u");
    names__.emplace_back("u");
    names__.emplace_back("y_mis");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_mis)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "w" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_coord_theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_coord_theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_coord_u" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_coord_u" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    param_names__.emplace_back(std::string() + "rho");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_u" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_mis; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mis" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "w" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_coord_theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_coord_theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_coord_u" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_coord_u" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    param_names__.emplace_back(std::string() + "rho");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_u" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "u" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_mis; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mis" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_coord_theta\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y_coord_theta\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_coord_u\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y_coord_u\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_theta\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"r_u\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y_mis\",\"type\":{\"name\":\"array\",\"length\":" << N_mis << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_coord_theta\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y_coord_theta\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_coord_u\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y_coord_u\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"r_theta\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"r_u\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y_mis\",\"type\":{\"name\":\"array\",\"length\":" << N_mis << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_issueipe_namespace::model_issueipe;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_issueipe_namespace::profiles__;
}
#endif
#endif
