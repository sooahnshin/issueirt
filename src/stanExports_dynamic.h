// Generated by rstantools.  Do not edit by hand.

/*
    issueirt is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    issueirt is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with issueirt.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_dynamic_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 80> locations_array__ =
  {" (found before start of program)",
  " (in 'dynamic', line 20, column 2 to column 16)",
  " (in 'dynamic', line 21, column 2 to column 21)",
  " (in 'dynamic', line 22, column 2 to column 24)",
  " (in 'dynamic', line 23, column 2 to column 24)",
  " (in 'dynamic', line 24, column 2 to column 20)",
  " (in 'dynamic', line 25, column 2 to column 20)",
  " (in 'dynamic', line 26, column 2 to column 21)",
  " (in 'dynamic', line 27, column 2 to column 20)",
  " (in 'dynamic', line 30, column 2 to column 27)",
  " (in 'dynamic', line 31, column 2 to column 27)",
  " (in 'dynamic', line 32, column 2 to column 16)",
  " (in 'dynamic', line 33, column 2 to column 23)",
  " (in 'dynamic', line 34, column 2 to column 12)",
  " (in 'dynamic', line 36, column 4 to column 57)",
  " (in 'dynamic', line 37, column 4 to column 59)",
  " (in 'dynamic', line 35, column 17 to line 38, column 3)",
  " (in 'dynamic', line 35, column 2 to line 38, column 3)",
  " (in 'dynamic', line 40, column 4 to column 45)",
  " (in 'dynamic', line 41, column 4 to column 47)",
  " (in 'dynamic', line 39, column 17 to line 42, column 3)",
  " (in 'dynamic', line 39, column 2 to line 42, column 3)",
  " (in 'dynamic', line 44, column 6 to column 22)",
  " (in 'dynamic', line 43, column 17 to line 45, column 5)",
  " (in 'dynamic', line 43, column 2 to line 45, column 5)",
  " (in 'dynamic', line 46, column 2 to column 22)",
  " (in 'dynamic', line 50, column 4 to column 49)",
  " (in 'dynamic', line 51, column 4 to column 49)",
  " (in 'dynamic', line 49, column 17 to line 52, column 3)",
  " (in 'dynamic', line 49, column 2 to line 52, column 3)",
  " (in 'dynamic', line 53, column 2 to column 55)",
  " (in 'dynamic', line 55, column 4 to column 34)",
  " (in 'dynamic', line 56, column 4 to column 31)",
  " (in 'dynamic', line 60, column 4 to column 35)",
  " (in 'dynamic', line 54, column 17 to line 61, column 3)",
  " (in 'dynamic', line 54, column 2 to line 61, column 3)",
  " (in 'dynamic', line 63, column 4 to column 30)",
  " (in 'dynamic', line 64, column 4 to column 27)",
  " (in 'dynamic', line 67, column 4 to column 39)",
  " (in 'dynamic', line 68, column 4 to column 28)",
  " (in 'dynamic', line 68, column 24 to column 25)",
  " (in 'dynamic', line 69, column 4 to column 27)",
  " (in 'dynamic', line 62, column 17 to line 70, column 3)",
  " (in 'dynamic', line 62, column 2 to line 70, column 3)",
  " (in 'dynamic', line 72, column 4 to column 151)",
  " (in 'dynamic', line 71, column 21 to line 73, column 3)",
  " (in 'dynamic', line 71, column 2 to line 73, column 3)",
  " (in 'dynamic', line 2, column 1 to column 16)",
  " (in 'dynamic', line 3, column 1 to column 16)",
  " (in 'dynamic', line 4, column 1 to column 16)",
  " (in 'dynamic', line 5, column 1 to column 20)",
  " (in 'dynamic', line 7, column 1 to column 16)",
  " (in 'dynamic', line 8, column 25 to column 26)",
  " (in 'dynamic', line 8, column 1 to column 28)",
  " (in 'dynamic', line 9, column 25 to column 26)",
  " (in 'dynamic', line 9, column 1 to column 28)",
  " (in 'dynamic', line 10, column 29 to column 34)",
  " (in 'dynamic', line 10, column 1 to column 36)",
  " (in 'dynamic', line 11, column 22 to column 27)",
  " (in 'dynamic', line 11, column 1 to column 29)",
  " (in 'dynamic', line 13, column 25 to column 26)",
  " (in 'dynamic', line 13, column 1 to column 28)",
  " (in 'dynamic', line 14, column 1 to column 17)",
  " (in 'dynamic', line 15, column 1 to column 17)",
  " (in 'dynamic', line 16, column 12 to column 13)",
  " (in 'dynamic', line 16, column 1 to column 15)",
  " (in 'dynamic', line 17, column 18 to column 19)",
  " (in 'dynamic', line 17, column 1 to column 21)",
  " (in 'dynamic', line 20, column 13 to column 14)",
  " (in 'dynamic', line 21, column 18 to column 19)",
  " (in 'dynamic', line 22, column 21 to column 22)",
  " (in 'dynamic', line 23, column 21 to column 22)",
  " (in 'dynamic', line 24, column 17 to column 18)",
  " (in 'dynamic', line 25, column 17 to column 18)",
  " (in 'dynamic', line 26, column 18 to column 19)",
  " (in 'dynamic', line 30, column 22 to column 25)",
  " (in 'dynamic', line 31, column 24 to column 25)",
  " (in 'dynamic', line 32, column 13 to column 14)",
  " (in 'dynamic', line 33, column 20 to column 21)",
  " (in 'dynamic', line 34, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_dynamic final : public model_base_crtp<model_dynamic> {
private:
  int J;
  int M;
  int N;
  int N_obs;
  int K;
  std::vector<int> j;
  std::vector<int> m;
  std::vector<int> y_obs;
  std::vector<int> idx_obs;
  std::vector<int> z;
  double a;
  double b;
  std::vector<double> omega;
  std::vector<int> idx;
  int x_ext_1dim__;
public:
  ~model_dynamic() {}
  model_dynamic(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_dynamic_namespace::model_dynamic";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 47;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 48;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 49;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "N_obs", "int",
        std::vector<size_t>{});
      N_obs = std::numeric_limits<int>::min();
      current_statement__ = 50;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "N_obs", N_obs, 1);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 51;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("j", "N", N);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "j", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      j = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 53;
      j = context__.vals_i("j");
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "j", j, 1);
      current_statement__ = 53;
      stan::math::check_less_or_equal(function__, "j", j, J);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("m", "N", N);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "m", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      m = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 55;
      m = context__.vals_i("m");
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "m", m, 1);
      current_statement__ = 55;
      stan::math::check_less_or_equal(function__, "m", m, M);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("y_obs", "N_obs", N_obs);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "y_obs", "int",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      y_obs = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      current_statement__ = 57;
      y_obs = context__.vals_i("y_obs");
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "y_obs", y_obs, 0);
      current_statement__ = 57;
      stan::math::check_less_or_equal(function__, "y_obs", y_obs, 1);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("idx_obs", "N_obs", N_obs);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "idx_obs", "int",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      idx_obs = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      current_statement__ = 59;
      idx_obs = context__.vals_i("idx_obs");
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "idx_obs", idx_obs, 1);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("z", "M", M);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "z", "int",
        std::vector<size_t>{static_cast<size_t>(M)});
      z = std::vector<int>(M, std::numeric_limits<int>::min());
      current_statement__ = 61;
      z = context__.vals_i("z");
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "z", z, 1);
      current_statement__ = 61;
      stan::math::check_less_or_equal(function__, "z", z, K);
      current_statement__ = 62;
      context__.validate_dims("data initialization", "a", "double",
        std::vector<size_t>{});
      a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 62;
      a = context__.vals_r("a")[(1 - 1)];
      current_statement__ = 62;
      stan::math::check_greater_or_equal(function__, "a", a, 0);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "b", "double",
        std::vector<size_t>{});
      b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 63;
      b = context__.vals_r("b")[(1 - 1)];
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "b", b, 0);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("omega", "J", J);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "omega", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      omega = std::vector<double>(J,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 65;
      omega = context__.vals_r("omega");
      current_statement__ = 66;
      stan::math::validate_non_negative_index("idx", "J", J);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "idx", "int",
        std::vector<size_t>{static_cast<size_t>(J)});
      idx = std::vector<int>(J, std::numeric_limits<int>::min());
      current_statement__ = 67;
      idx = context__.vals_i("idx");
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "idx", idx, 1);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("alpha", "M", M);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("w", "M", M);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("x_coord_theta", "K", K);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("y_coord_theta", "K", K);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("x_coord_u", "M", M);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("y_coord_u", "M", M);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("x", "J", J);
      current_statement__ = 75;
      x_ext_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 75;
      x_ext_1dim__ = (J + 1);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("x_ext", "J + 1", x_ext_1dim__);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("r_theta", "K", K);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("theta", "K", K);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("r_u", "M", M);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("u", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = M + M + K + K + M + M + (J * 2) + 1;
  }
  inline std::string model_name() const final {
    return "model_dynamic";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_dynamic_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 1;
      alpha = in__.template read<std::vector<local_scalar_t__>>(M);
      std::vector<local_scalar_t__> w =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 2;
      w = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
            jacobian__>(0, lp__, M);
      std::vector<local_scalar_t__> x_coord_theta =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 3;
      x_coord_theta = in__.template read<std::vector<local_scalar_t__>>(K);
      std::vector<local_scalar_t__> y_coord_theta =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 4;
      y_coord_theta = in__.template read<std::vector<local_scalar_t__>>(K);
      std::vector<local_scalar_t__> x_coord_u =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 5;
      x_coord_u = in__.template read<std::vector<local_scalar_t__>>(M);
      std::vector<local_scalar_t__> y_coord_u =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 6;
      y_coord_u = in__.template read<std::vector<local_scalar_t__>>(M);
      std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> x =
        std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(J,
          Eigen::Matrix<local_scalar_t__,1,-1>::Constant(2, DUMMY_VAR__));
      current_statement__ = 7;
      x = in__.template read<
            std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>>(J, 2);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 8;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> x_ext =
        std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(x_ext_1dim__,
          Eigen::Matrix<local_scalar_t__,1,-1>::Constant(2, DUMMY_VAR__));
      std::vector<local_scalar_t__> r_theta =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      std::vector<local_scalar_t__> theta =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      std::vector<local_scalar_t__> r_u =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      std::vector<local_scalar_t__> u =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 17;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 14;
        stan::model::assign(theta,
          stan::math::atan2(
            stan::model::rvalue(y_coord_theta, "y_coord_theta",
              stan::model::index_uni(k)),
            stan::model::rvalue(x_coord_theta, "x_coord_theta",
              stan::model::index_uni(k))), "assigning variable theta",
          stan::model::index_uni(k));
        current_statement__ = 15;
        stan::model::assign(r_theta,
          stan::math::hypot(
            stan::model::rvalue(x_coord_theta, "x_coord_theta",
              stan::model::index_uni(k)),
            stan::model::rvalue(y_coord_theta, "y_coord_theta",
              stan::model::index_uni(k))), "assigning variable r_theta",
          stan::model::index_uni(k));
      }
      current_statement__ = 21;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 18;
        stan::model::assign(u,
          stan::math::atan2(
            stan::model::rvalue(y_coord_u, "y_coord_u",
              stan::model::index_uni(i)),
            stan::model::rvalue(x_coord_u, "x_coord_u",
              stan::model::index_uni(i))), "assigning variable u",
          stan::model::index_uni(i));
        current_statement__ = 19;
        stan::model::assign(r_u,
          stan::math::hypot(
            stan::model::rvalue(x_coord_u, "x_coord_u",
              stan::model::index_uni(i)),
            stan::model::rvalue(y_coord_u, "y_coord_u",
              stan::model::index_uni(i))), "assigning variable r_u",
          stan::model::index_uni(i));
      }
      current_statement__ = 24;
      for (int k = 1; k <= J; ++k) {
        current_statement__ = 22;
        stan::model::assign(x_ext,
          stan::model::rvalue(x, "x", stan::model::index_uni(k)),
          "assigning variable x_ext", stan::model::index_uni(k));
      }
      current_statement__ = 25;
      stan::model::assign(x_ext,
        (Eigen::Matrix<double,1,-1>(2) << 0, 0).finished(),
        "assigning variable x_ext", stan::model::index_uni((J + 1)));
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "r_theta", r_theta, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "r_u", r_u, 0);
      {
        current_statement__ = 29;
        for (int k = 1; k <= J; ++k) {
          current_statement__ = 26;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(
                             stan::model::rvalue(x, "x",
                               stan::model::index_uni(k)), "x[k]",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(
                             stan::model::rvalue(x_ext, "x_ext",
                               stan::model::index_uni(
                                 stan::model::rvalue(idx, "idx",
                                   stan::model::index_uni(k)))),
                             "x_ext[idx[k]]", stan::model::index_uni(1)),
                           stan::model::rvalue(omega, "omega",
                             stan::model::index_uni(k))));
          current_statement__ = 27;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(
                             stan::model::rvalue(x, "x",
                               stan::model::index_uni(k)), "x[k]",
                             stan::model::index_uni(2)),
                           stan::model::rvalue(
                             stan::model::rvalue(x_ext, "x_ext",
                               stan::model::index_uni(
                                 stan::model::rvalue(idx, "idx",
                                   stan::model::index_uni(k)))),
                             "x_ext[idx[k]]", stan::model::index_uni(2)),
                           stan::model::rvalue(omega, "omega",
                             stan::model::index_uni(k))));
        }
        current_statement__ = 30;
        lp_accum__.add((-a *
          stan::math::log(stan::math::modified_bessel_first_kind(0, rho))));
        current_statement__ = 35;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 31;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(r_theta, "r_theta",
                             stan::model::index_uni(k)), 1.0, 0.1));
          current_statement__ = 32;
          lp_accum__.add(-stan::math::log(
                            stan::model::rvalue(r_theta, "r_theta",
                              stan::model::index_uni(k))));
          current_statement__ = 33;
          lp_accum__.add(stan::math::von_mises_lpdf<propto__>(
                           stan::model::rvalue(theta, "theta",
                             stan::model::index_uni(k)), 0, (b * rho)));
        }
        current_statement__ = 43;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 36;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(r_u, "r_u",
                             stan::model::index_uni(i)), 1.0, 0.1));
          current_statement__ = 37;
          lp_accum__.add(-stan::math::log(
                            stan::model::rvalue(r_u, "r_u",
                              stan::model::index_uni(i))));
          current_statement__ = 38;
          lp_accum__.add(stan::math::von_mises_lpdf<propto__>(
                           stan::model::rvalue(u, "u",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(theta, "theta",
                             stan::model::index_uni(
                               stan::model::rvalue(z, "z",
                                 stan::model::index_uni(i)))), rho));
          current_statement__ = 39;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(w, "w",
                             stan::model::index_uni(i)), 0, 5));
          current_statement__ = 40;
          if (stan::math::logical_lt(
                stan::model::rvalue(w, "w", stan::model::index_uni(i)), 0)) {
            current_statement__ = 40;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 40;
            lp_accum__.add(-stan::math::normal_lccdf(0, 0, 5));
          }
          current_statement__ = 41;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(alpha, "alpha",
                             stan::model::index_uni(i)), 0, 5));
        }
        current_statement__ = 46;
        for (int n = 1; n <= N_obs; ++n) {
          current_statement__ = 44;
          lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(
                           stan::model::rvalue(y_obs, "y_obs",
                             stan::model::index_uni(n)),
                           stan::math::Phi(
                             ((stan::math::dot_product(
                                 stan::model::rvalue(x, "x",
                                   stan::model::index_uni(
                                     stan::model::rvalue(j, "j",
                                       stan::model::index_uni(
                                         stan::model::rvalue(idx_obs,
                                           "idx_obs",
                                           stan::model::index_uni(n)))))),
                                 (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                    stan::math::cos(
                                      stan::model::rvalue(u, "u",
                                        stan::model::index_uni(
                                          stan::model::rvalue(m, "m",
                                            stan::model::index_uni(
                                              stan::model::rvalue(idx_obs,
                                                "idx_obs",
                                                stan::model::index_uni(n))))))),
                                   stan::math::sin(
                                     stan::model::rvalue(u, "u",
                                       stan::model::index_uni(
                                         stan::model::rvalue(m, "m",
                                           stan::model::index_uni(
                                             stan::model::rvalue(idx_obs,
                                               "idx_obs",
                                               stan::model::index_uni(n)))))))).finished())
                             *
                             stan::model::rvalue(w, "w",
                               stan::model::index_uni(
                                 stan::model::rvalue(m, "m",
                                   stan::model::index_uni(
                                     stan::model::rvalue(idx_obs, "idx_obs",
                                       stan::model::index_uni(n))))))) -
                             stan::model::rvalue(alpha, "alpha",
                               stan::model::index_uni(
                                 stan::model::rvalue(m, "m",
                                   stan::model::index_uni(
                                     stan::model::rvalue(idx_obs, "idx_obs",
                                       stan::model::index_uni(n))))))))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_dynamic_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> alpha =
        std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha = in__.template read<std::vector<local_scalar_t__>>(M);
      std::vector<double> w =
        std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      w = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
            jacobian__>(0, lp__, M);
      std::vector<double> x_coord_theta =
        std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      x_coord_theta = in__.template read<std::vector<local_scalar_t__>>(K);
      std::vector<double> y_coord_theta =
        std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      y_coord_theta = in__.template read<std::vector<local_scalar_t__>>(K);
      std::vector<double> x_coord_u =
        std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      x_coord_u = in__.template read<std::vector<local_scalar_t__>>(M);
      std::vector<double> y_coord_u =
        std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      y_coord_u = in__.template read<std::vector<local_scalar_t__>>(M);
      std::vector<Eigen::Matrix<double,1,-1>> x =
        std::vector<Eigen::Matrix<double,1,-1>>(J,
          Eigen::Matrix<double,1,-1>::Constant(2,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 7;
      x = in__.template read<
            std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>>(J, 2);
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      std::vector<Eigen::Matrix<double,1,-1>> x_ext =
        std::vector<Eigen::Matrix<double,1,-1>>(x_ext_1dim__,
          Eigen::Matrix<double,1,-1>::Constant(2,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> r_theta =
        std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> theta =
        std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> r_u =
        std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> u =
        std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      out__.write(alpha);
      out__.write(w);
      out__.write(x_coord_theta);
      out__.write(y_coord_theta);
      out__.write(x_coord_u);
      out__.write(y_coord_u);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          out__.write(x[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(rho);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 17;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 14;
        stan::model::assign(theta,
          stan::math::atan2(
            stan::model::rvalue(y_coord_theta, "y_coord_theta",
              stan::model::index_uni(k)),
            stan::model::rvalue(x_coord_theta, "x_coord_theta",
              stan::model::index_uni(k))), "assigning variable theta",
          stan::model::index_uni(k));
        current_statement__ = 15;
        stan::model::assign(r_theta,
          stan::math::hypot(
            stan::model::rvalue(x_coord_theta, "x_coord_theta",
              stan::model::index_uni(k)),
            stan::model::rvalue(y_coord_theta, "y_coord_theta",
              stan::model::index_uni(k))), "assigning variable r_theta",
          stan::model::index_uni(k));
      }
      current_statement__ = 21;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 18;
        stan::model::assign(u,
          stan::math::atan2(
            stan::model::rvalue(y_coord_u, "y_coord_u",
              stan::model::index_uni(i)),
            stan::model::rvalue(x_coord_u, "x_coord_u",
              stan::model::index_uni(i))), "assigning variable u",
          stan::model::index_uni(i));
        current_statement__ = 19;
        stan::model::assign(r_u,
          stan::math::hypot(
            stan::model::rvalue(x_coord_u, "x_coord_u",
              stan::model::index_uni(i)),
            stan::model::rvalue(y_coord_u, "y_coord_u",
              stan::model::index_uni(i))), "assigning variable r_u",
          stan::model::index_uni(i));
      }
      current_statement__ = 24;
      for (int k = 1; k <= J; ++k) {
        current_statement__ = 22;
        stan::model::assign(x_ext,
          stan::model::rvalue(x, "x", stan::model::index_uni(k)),
          "assigning variable x_ext", stan::model::index_uni(k));
      }
      current_statement__ = 25;
      stan::model::assign(x_ext,
        (Eigen::Matrix<double,1,-1>(2) << 0, 0).finished(),
        "assigning variable x_ext", stan::model::index_uni((J + 1)));
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "r_theta", r_theta, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "r_u", r_u, 0);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= x_ext_1dim__; ++sym2__) {
            out__.write(x_ext[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(r_theta);
        out__.write(theta);
        out__.write(r_u);
        out__.write(u);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha, in__.read<std::vector<local_scalar_t__>>(M),
        "assigning variable alpha");
      out__.write(alpha);
      std::vector<local_scalar_t__> w =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(w, in__.read<std::vector<local_scalar_t__>>(M),
        "assigning variable w");
      out__.write_free_lb(0, w);
      std::vector<local_scalar_t__> x_coord_theta =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(x_coord_theta,
        in__.read<std::vector<local_scalar_t__>>(K),
        "assigning variable x_coord_theta");
      out__.write(x_coord_theta);
      std::vector<local_scalar_t__> y_coord_theta =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(y_coord_theta,
        in__.read<std::vector<local_scalar_t__>>(K),
        "assigning variable y_coord_theta");
      out__.write(y_coord_theta);
      std::vector<local_scalar_t__> x_coord_u =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(x_coord_u,
        in__.read<std::vector<local_scalar_t__>>(M),
        "assigning variable x_coord_u");
      out__.write(x_coord_u);
      std::vector<local_scalar_t__> y_coord_u =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(y_coord_u,
        in__.read<std::vector<local_scalar_t__>>(M),
        "assigning variable y_coord_u");
      out__.write(y_coord_u);
      std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> x =
        std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(J,
          Eigen::Matrix<local_scalar_t__,1,-1>::Constant(2, DUMMY_VAR__));
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          current_statement__ = 7;
          stan::model::assign(x, in__.read<local_scalar_t__>(),
            "assigning variable x", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(x);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 8;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "w", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "x_coord_theta",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "y_coord_theta",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "x_coord_u",
        "double", std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "y_coord_u",
        "double", std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(2)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "rho", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 1;
      alpha = context__.vals_r("alpha");
      out__.write(alpha);
      std::vector<local_scalar_t__> w =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 2;
      w = context__.vals_r("w");
      out__.write_free_lb(0, w);
      std::vector<local_scalar_t__> x_coord_theta =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 3;
      x_coord_theta = context__.vals_r("x_coord_theta");
      out__.write(x_coord_theta);
      std::vector<local_scalar_t__> y_coord_theta =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 4;
      y_coord_theta = context__.vals_r("y_coord_theta");
      out__.write(y_coord_theta);
      std::vector<local_scalar_t__> x_coord_u =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 5;
      x_coord_u = context__.vals_r("x_coord_u");
      out__.write(x_coord_u);
      std::vector<local_scalar_t__> y_coord_u =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 6;
      y_coord_u = context__.vals_r("y_coord_u");
      out__.write(y_coord_u);
      std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> x =
        std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(J,
          Eigen::Matrix<local_scalar_t__,1,-1>::Constant(2, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 7;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 7;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(x);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 8;
      rho = context__.vals_r("rho")[(1 - 1)];
      out__.write_free_lb(0, rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha", "w", "x_coord_theta",
                "y_coord_theta", "x_coord_u", "y_coord_u", "x", "rho"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"x_ext", "r_theta", "theta", "r_u", "u"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(M)},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{static_cast<size_t>(J),
                  static_cast<size_t>(2)}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(x_ext_1dim__),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(M)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "w" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_coord_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_coord_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_coord_u" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_coord_u" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "x" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "rho");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= x_ext_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "x_ext" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "r_theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "r_u" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "u" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "w" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_coord_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_coord_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "x_coord_u" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_coord_u" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "x" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "rho");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= x_ext_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "x_ext" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "r_theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "r_u" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "u" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_coord_theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y_coord_theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_coord_u\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y_coord_u\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_ext\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(x_ext_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"r_theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"r_u\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_coord_theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y_coord_theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_coord_u\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y_coord_u\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_ext\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(x_ext_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"r_theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"r_u\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"u\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((M + M) + K) + K) + M) + M) + (J * 2))
      + 1);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((x_ext_1dim__ * 2) + K) + K) + M) + M));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((M + M) + K) + K) + M) + M) + (J * 2))
      + 1);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((x_ext_1dim__ * 2) + K) + K) + M) + M));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_dynamic_namespace::model_dynamic;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_dynamic_namespace::profiles__;
}
#endif
#endif
